{"version":3,"file":"index.js","sources":["../webpack://@oakfinch/create-heroku-app-action/webpack/runtime/compat","../webpack://@oakfinch/create-heroku-app-action/./index.js"],"sourcesContent":["\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","const core = require('@actions/core')\nconst exec = require('@actions/exec')\nconst Heroku = require('heroku-client')\nconst fetch = require('node-fetch-cjs')\nconst { FormData } = require('formdata-polyfill/esm.min.js')\n\nconst domain = core.getInput('EPHEMERAL_DOMAIN')\nconst heroku = new Heroku({ token: core.getInput('HEROKU_API_TOKEN') })\nconst namecheap = {\n  username: core.getInput('NAMECHEAP_USERNAME'),\n  key: core.getInput('NAMECHEAP_API_KEY'),\n}\n\nasync function run() {\n\n  // create heroku app\n  const app = await heroku.post('/apps')\n\n  // add domain to heroku app\n  const { cname } = await heroku.post(\n    `/apps/${app.name}/domains`,\n    { body: { hostname: `${app.name}.${domain}`, sni_endpoint: null } }\n  )\n\n  // get external IP\n  const { stdout: ip } = await exec.getExecOutput(\n    'dig',\n    ['+short', 'myip.opendns.com', '@resolver1.opendns.com'],\n    { silent: true }\n  )\n\n  // add CNAME record to namecheap\n  const [sld, tld] = domain.split('.')\n  const body = Object.entries({\n    apiuser: namecheap.username,\n    apikey: namecheap.key,\n    username: namecheap.username,\n    Command: 'namecheap.domains.dns.setHosts',\n    ClientIp: ip.trim(),\n    SLD: sld,\n    TLD: tld,\n    HostName1: app.name,\n    RecordType1: 'CNAME',\n    Address1: cname,\n    TTL1: 100\n  }).reduce((acc, [key, val]) => {\n    acc.append(key, val)\n    return acc\n  }, new FormData())\n\n  const args = [\n    \"https://api.namecheap.com/xml.response\",\n    {\n      method: 'POST',\n      body\n    }\n  ]\n\n  await fetch(...args)\n\n  core.setOutput('url', `http://${app.name}.${domain}`)\n}\n\nrun()\n"],"mappings":";;AAAA;AACA;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;","sourceRoot":""}